You are given a 0-indexed integer array nums.

Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.

The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].

 

Example 1:

Input: nums = [12,6,1,2,7]
Output: 77
Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.
It can be shown that there are no ordered triplets of indices with a value greater than 77. 
Example 2:

Input: nums = [1,10,3,4,19]
Output: 133
Explanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.
It can be shown that there are no ordered triplets of indices with a value greater than 133.










class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        // int n=;
        // long long mx = INT_MIN;
        long long int ans=0,num1=0,num2=0,num3=0;
        for(int i=0;i<nums.size();i++){
            num1=nums[i];
            for(int j=i+1;j<nums.size();j++){
                num2=nums[j];
                for(int k=j+1;k<nums.size();k++){
                    num3=nums[k];
                long long int temp=(num1-num2)*num3;
               
                if(temp>ans)
                ans=temp;
            }
        }
    }
    return ans;
    
    }
};
