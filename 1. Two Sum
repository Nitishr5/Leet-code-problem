Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]




=========================== BRUT FORCE APPROCH ===================>>> o(N^2) T.C


class Solution {
public:
    
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>ans;
    for (int i = 0; i<nums.size()-1;i++){
        for(int j = i+1 ; j <nums.size();j++){
            if(nums[i]+nums[j] == target){
               ans={i,j};
            }
        }
    } 
    return ans;        
    }
};









======================== OPTIMAL USING <unordered_map> =============== T.C= O(N).









#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> mp;  // value -> index

    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];

        if (mp.find(complement) != mp.end()) {
            return {mp[complement], i}; // found the pair
        }

        mp[nums[i]] = i;
    }

    return {}; // shouldn't reach here if one solution is guaranteed
}

int main() {
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;

    vector<int> result = twoSum(nums, target);
    cout << "Indices: " << result[0] << ", " << result[1] << endl;
    return 0;
}
